---

- name: Update cache if greater than 3600 seconds (1 hour)
  apt:
    update_cache: yes
    cache_valid_time: 3600

- name: Install packages on Ubuntu
  apt:
    name: "{{ item }}"
    state: present
  with_items:  
    - mysql-server
    - mysql-client
    - python-mysqldb

- name: Delete anonymous MySQL server user
  mysql_user: 
    user: ""
    host: "{{ item }}"
    state: "absent"
  with_items:
    - "{{ ansible_hostname }}"
    - "{{ ansible_nodename }}"
    - localhost

- name: Remove the MySQL test database
  mysql_db:
    name: test
    state: absent

- name: Create Tomcat Sample database
  mysql_db:
    name: "{{ tomcat_sample_app_mysql_database }}"
    state: present
  register: db_created

- name: Copy tomcat-sample-data.sql
  copy:
    src: tomcat-sample-data.sql
    dest: /tmp/tomcat-sample-data.sql
    owner: root
    group: root
    mode: 0644
    backup: no
  when: db_created.changed

- name: Create and Update MySQL Root Password
  mysql_user:
    name: root
    host: "{{ item }}"
    password: "{{ mysql_root_password }}"
    state: present
  with_items:
    - "127.0.0.1"
    - "::1"
    - "{{ ansible_hostname }}"
    - "{{ ansible_nodename }}"
    - localhost

- name: Copy MySQL client config
  template:
    src: my.cnf.j2
    dest: /root/.my.cnf
    owner: root
    group: root
    mode: 0644
    backup: yes

- name: Import data for Tomcat Sample Database
  mysql_db:
    name: "{{ tomcat_sample_app_mysql_database }}"
    login_user: root
    login_password: "{{ mysql_root_password }}"
    state: import
    target: /tmp/tomcat-sample-data.sql
  when: db_created.changed

- name: Create and Update MySQL Tomcat Sample App User and Password
  mysql_user:
    name: "{{ tomcat_sample_app_mysql_user }}"
    host: "{{ item }}"
    password: "{{ tomcat_sample_app_mysql_password }}"
    priv: "{{ tomcat_sample_app_mysql_database }}.*:ALTER,DELETE,INSERT,SELECT,UPDATE"
    state: present
  with_items:
    - "lb01"
    - "lb02"

- name: Configure mysql bindings
  lineinfile:
    dest: /etc/mysql/my.cnf
    line: "bind-address            = {{ ansible_eth1.ipv4.address }}"
    regexp: "^bind-address"
  notify: restart mysql

- name: Start the service and enable on startup
  service:
    name: mysql
    enabled: yes
    state: started
