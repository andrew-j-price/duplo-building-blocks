---

# Configuration below primarily based upon https://www.digitalocean.com/community/tutorials/how-to-install-elasticsearch-logstash-and-kibana-elk-stack-on-ubuntu-14-04

- name: Enable ppa repo
  apt_repository:
    repo: 'ppa:webupd8team/java'

- name: Accept Java 8 License
  debconf:
    name: 'oracle-java8-installer'
    question: 'shared/accepted-oracle-license-v1-1'
    value: 'true'
    vtype: 'select'

- name: Add apt key
  apt_key:
    url: https://packages.elastic.co/GPG-KEY-elasticsearch

- name: add Debian based repos
  apt_repository:
    repo: "{{ item }}"
    state: present
  with_items:
    - 'deb http://packages.elastic.co/elasticsearch/2.x/debian stable main'
    - 'deb http://packages.elastic.co/kibana/4.4/debian stable main'
    - 'deb http://packages.elastic.co/logstash/2.2/debian stable main'

- name: Update cache if greater than 3600 seconds (1 hour)
  apt:
    update_cache: yes
    cache_valid_time: 3600

- name: Install packages on Ubuntu
  apt:
    name: "{{ item }}"
    state: present
    install_recommends: no
  with_items:
    - apache2-utils
    - elasticsearch
    - kibana
    - logstash
    - nginx
    - oracle-java8-installer
    - unzip

- name: Set elasticsearch host
  lineinfile:
    dest: /etc/elasticsearch/elasticsearch.yml
    line: 'network.host: localhost'
    regexp: 'network\.host\:'
  notify: restart elasticsearch

- name: Set kibana host
  lineinfile:
    dest: /opt/kibana/config/kibana.yml
    line: 'server.host: "localhost"'
    regexp: 'server\.host\:'
  notify: restart kibana

- name: Configure nginx for reverse proxy
  template:
    src: default.j2
    dest: /etc/nginx/sites-available/default
    mode: 0644
    backup: yes
  notify: reload nginx

- name: Create PKI directory structure
  file:
    path: "{{ item }}"
    owner: root
    group: root
    state: directory
    mode: 0755
  with_items:
    - /etc/pki
    - /etc/pki/tls
    - /etc/pki/tls/certs
    - /etc/pki/tls/private

- name: Create ssl certificate
  command: sudo openssl req -subj '/CN=sa02/' -x509 -days 3650 -batch -nodes -newkey rsa:2048 -keyout private/logstash-forwarder.key -out certs/logstash-forwarder.crt
  args:
    chdir: /etc/pki/tls
    creates: /etc/pki/tls/certs/logstash-forwarder.crt

- name: fetch the generated public certificate  # to be used by filebeat_client role
  fetch:
    src: "/etc/pki/tls/certs/logstash-forwarder.crt"
    dest: "/tmp/logstash-forwarder.crt"
    flat: yes

- name: Copy beats-input.conf
  copy:
    src: 02-beats-input.conf
    dest: /etc/logstash/conf.d/02-beats-input.conf
    owner: root
    group: root
    mode: 0644
  notify: restart logstash

- name: Copy syslog-filter.conf
  copy:
    src: 10-syslog-filter.conf
    dest: /etc/logstash/conf.d/10-syslog-filter.conf
    owner: root
    group: root
    mode: 0644
  notify: restart logstash

- name: Copy elasticsearch-output.conf
  copy:
    src: 30-elasticsearch-output.conf
    dest: /etc/logstash/conf.d/30-elasticsearch-output.conf
    owner: root
    group: root
    mode: 0644
  notify: restart logstash

- name: download beats dashboard
  get_url:
    url: "https://download.elastic.co/beats/dashboards/beats-dashboards-1.1.0.zip"
    dest: "/tmp/beats-dashboards-1.1.0.zip"
  register: beats_build

- name: extract beats dashboard
  unarchive:
    src: "/tmp/beats-dashboards-1.1.0.zip"
    dest: "/tmp/"
    copy: no
  when: beats_build.changed

- name: load beats dashabods
  command: ./load.sh
  args:
    chdir: /tmp/beats-dashboards-1.1.0
  when: beats_build.changed

- name: download Filebeat index template
  get_url:
    url: "https://gist.githubusercontent.com/thisismitch/3429023e8438cc25b86c/raw/d8c479e2a1adcea8b1fe86570e42abab0f10f364/filebeat-index-template.json"
    dest: "/tmp/filebeat-index-template.json"
  register: filebeat_index_template

- name: load Filebeat index template
  command: curl -XPUT 'http://localhost:9200/_template/filebeat?pretty' -d@filebeat-index-template.json
  args:
    chdir: /tmp/
  when: filebeat_index_template.changed

- name: Start the service and enable on startup on Debian based systems
  service:
    name: "{{ item }}"
    enabled: yes
    state: started
  with_items:
    - elasticsearch
    - kibana
    - logstash
    - nginx
